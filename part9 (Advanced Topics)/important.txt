1Ô∏è‚É£ Synchronous vs. Asynchronous JavaScript (Basic Concept)

üîπ Synchronous JavaScript (One by One Execution)
Code runs line by line, in order.
Each task must finish before the next one starts.
Blocking execution (if one task takes time, everything else stops and waits).

üîπ Asynchronous JavaScript (Non-Blocking Execution)
Code does NOT wait for a task to finish before moving to the next.
Faster because other tasks can continue while waiting.
Uses callbacks, promises, async/await to handle tasks that take time (like API calls, file reading, timers).




2Ô∏è‚É£ What is the Event Loop?
JavaScript is single-threaded, meaning it can only do one task at a time. However, it can still handle asynchronous operations (like API calls, setTimeout, etc.) without blocking execution.
1Ô∏è‚É£ JavaScript starts executing code line by line (this is called the Call Stack).
2Ô∏è‚É£ If there's a synchronous task, it runs immediately in the Call Stack.
3Ô∏è‚É£ If there's an asynchronous task (like setTimeout, API calls, event listeners), it is sent to the Web APIs (like the browser).
4Ô∏è‚É£ Once the asynchronous task is done, it moves to the Callback Queue (or Microtask Queue, depending on the task).
5Ô∏è‚É£ The Event Loop checks if the Call Stack is empty. If yes, it takes the first task from the queue and puts it in the Call Stack to execute.

üìå In simple words: JavaScript keeps checking for pending tasks (from APIs, timers, promises) and executes them when the Call Stack is free.



Example of Event loop
console.log("Start");

setTimeout(() => {
    console.log("Inside setTimeout");
}, 0);

console.log("End");

üìå Execution Order (Step-by-Step)
1Ô∏è‚É£ "Start" is logged immediately (Call Stack).
2Ô∏è‚É£ setTimeout is sent to the Web API with a 0ms delay.
3Ô∏è‚É£ "End" is logged immediately because JavaScript doesn‚Äôt wait.
4Ô∏è‚É£ The Event Loop sees the Call Stack is empty, so it moves "Inside setTimeout" from the queue to the stack.
5Ô∏è‚É£ "Inside setTimeout" is logged last.





3Ô∏è‚É£Call Stack
JavaScript starts executing code line by line (this is called the Call Stack).
JavaScript uses a Call Stack to keep track of function execution.

When a function is called, it's added to the stack.
When a function completes, it's removed from the stack.
If a function calls another function, the new function is added on top of the stack.



4Ô∏è‚É£ Callbacks
What is a Callback Function?
A callback function is a function passed as an argument to another function and executed later.



5Ô∏è‚É£ Closures
What is a Closure?
A closure is a function that remembers the variables from its outer scope even after the outer function has finished executing. - In simple ways that the child function access the values of parent function even after executing the parent function.



3Ô∏è‚É£ Callback vs. Closure: The Difference
Feature	        Callback	                                                       Closure
Definition	    Function passed as an argument to another function	             Function that retains access to outer variables
Use Case	      Asynchronous tasks (e.g., API calls, event listeners)	           Data persistence, encapsulation
Execution	      Runs later when an event occurs	                                 Self-contained and executed when called
Example	        setTimeout(callback, 1000)	                                     function inner() { console.log(outerVar) }



6Ô∏è‚É£ Promises ‚Äì "A Promise is Like a Real-Life Promise!"
A promise is something that will complete in the future. It can either:
‚úÖ Resolve (success) ‚Üí We get the result.
‚ùå Reject (fail) ‚Üí We get an error.



7Ô∏è‚É£ Async/Await ‚Äì "Easier Way to Handle Promises!"
‚úÖ async makes a function return a promise.
‚úÖ await pauses execution until the promise is resolved.



5Ô∏è‚É£ Try & Catch ‚Äì "Handling Errors Gracefully"
try runs the code.
catch catches errors if something goes wrong.



6Ô∏è‚É£ Fetch API ‚Äì "Getting Data from the Internet"
The Fetch API is used to get data from an API (like a website or database).
It returns a promise, so we use .then() or async/await.



7Ô∏è‚É£ Chaining Promises & API Calls ‚Äì "Running Multiple Promises in Order"
Sometimes, we need multiple API calls to happen one after another. We do this by chaining promises.




What is call by value and call by reference ?
call by value is used for the primitive data types in js like (boolean, string, number) & call by reference is used for non primitive data types like functions, objects & Arrays.

Example of Call by value:
let x = 12;
x = y;
x = 15;
console.log(x, y); Anwer: 15, 12

Example of Call by reference:
let obj1 = {
    name: "whoami",
    rollno: 12;
}
let obj2 = obj1;

obj2.rollno = 1;

console.log("obj1:", obj1); // Answer: name: whoami rollno: 1
console.log("obj2:", obj2); // Answer: name: whoami rollno: 1
