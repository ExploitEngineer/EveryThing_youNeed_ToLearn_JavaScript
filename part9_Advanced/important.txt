1Ô∏è‚É£ Synchronous vs. Asynchronous JavaScript (Basic Concept)

üîπ Synchronous JavaScript (One by One Execution)
Code runs line by line, in order.
Each task must finish before the next one starts.
Blocking execution (if one task takes time, everything else stops and waits).

üîπ Asynchronous JavaScript (Non-Blocking Execution)
Code does NOT wait for a task to finish before moving to the next.
Faster because other tasks can continue while waiting.
Uses callbacks, promises, async/await to handle tasks that take time (like API calls, file reading, timers).




1Ô∏è‚É£ What is the Event Loop?
The Event Loop is what allows JavaScript to handle asynchronous operations without blocking execution. It enables JavaScript to run single-threaded, yet still perform non-blocking I/O operations, like handling API requests, setTimeout, and user interactions.



Call Stack
JavaScript uses a Call Stack to keep track of function execution.

When a function is called, it's added to the stack.
When a function completes, it's removed from the stack.
If a function calls another function, the new function is added on top of the stack.



1Ô∏è‚É£ Callbacks
What is a Callback Function?
A callback function is a function passed as an argument to another function and executed later.



2Ô∏è‚É£ Closures
What is a Closure?
A closure is a function that remembers the variables from its outer scope even after the outer function has finished executing.



3Ô∏è‚É£ Callback vs. Closure: The Difference
Feature	        Callback	                                                       Closure
Definition	    Function passed as an argument to another function	             Function that retains access to outer variables
Use Case	      Asynchronous tasks (e.g., API calls, event listeners)	           Data persistence, encapsulation
Execution	      Runs later when an event occurs	                                 Self-contained and executed when called
Example	        setTimeout(callback, 1000)	                                     function inner() { console.log(outerVar) }



3Ô∏è‚É£ Promises ‚Äì "A Promise is Like a Real-Life Promise!"
A promise is something that will complete in the future. It can either:
‚úÖ Resolve (success) ‚Üí We get the result.
‚ùå Reject (fail) ‚Üí We get an error.



4Ô∏è‚É£ Async/Await ‚Äì "Easier Way to Handle Promises!"
‚úÖ async makes a function return a promise.
‚úÖ await pauses execution until the promise is resolved.



5Ô∏è‚É£ Try & Catch ‚Äì "Handling Errors Gracefully"
try runs the code.
catch catches errors if something goes wrong.



6Ô∏è‚É£ Fetch API ‚Äì "Getting Data from the Internet"
The Fetch API is used to get data from an API (like a website or database).
It returns a promise, so we use .then() or async/await.



7Ô∏è‚É£ Chaining Promises & API Calls ‚Äì "Running Multiple Promises in Order"
Sometimes, we need multiple API calls to happen one after another. We do this by chaining promises.
